// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20201217210425_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Persistence.Models.Accommodation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Number")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Website")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("ID");

                    b.ToTable("Accommodations");
                });

            modelBuilder.Entity("Persistence.Models.BuildingPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ConferenceID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Path")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("ID");

                    b.HasIndex("ConferenceID");

                    b.ToTable("BuildingPlans");
                });

            modelBuilder.Entity("Persistence.Models.Conference", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Country")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SocialMedia")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("Persistence.Models.ConferenceAccommodation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccommodationID")
                        .HasColumnType("integer");

                    b.Property<int>("ConferenceID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AccommodationID");

                    b.HasIndex("ConferenceID");

                    b.ToTable("ConferenceAccommodations");
                });

            modelBuilder.Entity("Persistence.Models.ConferenceEmergencyNumber", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ConferenceID")
                        .HasColumnType("integer");

                    b.Property<int>("EmergencyNumberID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ConferenceID");

                    b.HasIndex("EmergencyNumberID");

                    b.ToTable("ConferenceEmergencyNumbers");
                });

            modelBuilder.Entity("Persistence.Models.ConferenceOrganizer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ConferenceID")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizerID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ConferenceID");

                    b.HasIndex("OrganizerID");

                    b.ToTable("ConferenceOrganizer");
                });

            modelBuilder.Entity("Persistence.Models.ConferencePhoto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ConferenceID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("ID");

                    b.HasIndex("ConferenceID");

                    b.ToTable("ConferencePhoto");
                });

            modelBuilder.Entity("Persistence.Models.ConferencePointOfInterest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ConferenceID")
                        .HasColumnType("integer");

                    b.Property<int>("PointOfInterestID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ConferenceID");

                    b.HasIndex("PointOfInterestID");

                    b.ToTable("ConferencePointsOfInterest");
                });

            modelBuilder.Entity("Persistence.Models.ConferenceSponsor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ConferenceID")
                        .HasColumnType("integer");

                    b.Property<int>("SponsorID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ConferenceID");

                    b.HasIndex("SponsorID");

                    b.ToTable("ConferenceSponsors");
                });

            modelBuilder.Entity("Persistence.Models.EmergencyNumber", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Number")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.HasKey("ID");

                    b.ToTable("EmergencyNumbers");
                });

            modelBuilder.Entity("Persistence.Models.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<int>("MobileUserID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Persistence.Models.Organizer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Affiliation")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Company")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Contact")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("LastName")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.ToTable("Organizer");
                });

            modelBuilder.Entity("Persistence.Models.Participant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Affiliation")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Company")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Country")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("LastName")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.HasKey("ID");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Persistence.Models.ParticipantPhoto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ParticipantID")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("ID");

                    b.HasIndex("ParticipantID")
                        .IsUnique();

                    b.ToTable("ParticipantPhotos");
                });

            modelBuilder.Entity("Persistence.Models.PointOfInterest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Contact")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<int>("PointOfInterestTypeID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("PointOfInterestTypeID");

                    b.ToTable("PointsOfInterest");
                });

            modelBuilder.Entity("Persistence.Models.PointOfInterestIcon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Path")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.HasKey("ID");

                    b.ToTable("PointOfInterestIcon");
                });

            modelBuilder.Entity("Persistence.Models.PointOfInterestType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<int>("PointOfInterestIconID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("PointOfInterestIconID");

                    b.ToTable("PointOfInterestTypes");
                });

            modelBuilder.Entity("Persistence.Models.Presentation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Authors")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("ConferenceID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Place")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("PresentationTypeID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("ID");

                    b.HasIndex("ConferenceID");

                    b.HasIndex("PresentationTypeID");

                    b.ToTable("Presentations");
                });

            modelBuilder.Entity("Persistence.Models.PresentationParticipant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsAuthor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSpeaker")
                        .HasColumnType("boolean");

                    b.Property<int>("ParticipantID")
                        .HasColumnType("integer");

                    b.Property<int>("PresentationID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ParticipantID");

                    b.HasIndex("PresentationID");

                    b.ToTable("PresentationParticipants");
                });

            modelBuilder.Entity("Persistence.Models.PresentationPhoto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("PresentationID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("PresentationID");

                    b.ToTable("PresentationPhoto");
                });

            modelBuilder.Entity("Persistence.Models.PresentationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.HasKey("ID");

                    b.ToTable("PresentationTypes");
                });

            modelBuilder.Entity("Persistence.Models.Rate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ConferenceID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<int>("MobileUserID")
                        .HasColumnType("integer");

                    b.Property<int?>("PresentationID")
                        .HasColumnType("integer");

                    b.Property<int>("RateCriterionID")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ConferenceID");

                    b.HasIndex("PresentationID");

                    b.HasIndex("RateCriterionID");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("Persistence.Models.RateCriterion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<int>("RateCriterionTypeID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("RateCriterionTypeID");

                    b.ToTable("RateCriteria");
                });

            modelBuilder.Entity("Persistence.Models.RateCriterionType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("ID");

                    b.ToTable("RateCriterionTypes");
                });

            modelBuilder.Entity("Persistence.Models.Sponsor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Country")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("LogoPath")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<string>("Website")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("ID");

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("Persistence.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "0d24fcfe-5db9-4d78-a22d-1eb82f99ef6a",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFs5slr7ymXVepRXgRq4A1FpLmp3pngPtZ6qvV4QAlyVlHsy6iWs4IX9MpGP2G0drw==",
                            SecurityStamp = "3d9b1c93-0e98-4a47-9e71-869bfd8d730a",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Persistence.Models.BuildingPlan", b =>
                {
                    b.HasOne("Persistence.Models.Conference", "Conference")
                        .WithMany("BuildingPlans")
                        .HasForeignKey("ConferenceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.ConferenceAccommodation", b =>
                {
                    b.HasOne("Persistence.Models.Accommodation", "Accommodation")
                        .WithMany("ConferenceAccommodations")
                        .HasForeignKey("AccommodationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Persistence.Models.Conference", "Conference")
                        .WithMany("ConferenceAccommodations")
                        .HasForeignKey("ConferenceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.ConferenceEmergencyNumber", b =>
                {
                    b.HasOne("Persistence.Models.Conference", "Conference")
                        .WithMany("ConferenceEmergencyNumbers")
                        .HasForeignKey("ConferenceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Persistence.Models.EmergencyNumber", "EmergencyNumber")
                        .WithMany("ConferenceEmergencyNumbers")
                        .HasForeignKey("EmergencyNumberID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.ConferenceOrganizer", b =>
                {
                    b.HasOne("Persistence.Models.Conference", "Conference")
                        .WithMany("ConferenceOrganizers")
                        .HasForeignKey("ConferenceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Persistence.Models.Organizer", "Organizer")
                        .WithMany("ConferenceOrganizers")
                        .HasForeignKey("OrganizerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.ConferencePhoto", b =>
                {
                    b.HasOne("Persistence.Models.Conference", "Conference")
                        .WithMany("ConferencePhotos")
                        .HasForeignKey("ConferenceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.ConferencePointOfInterest", b =>
                {
                    b.HasOne("Persistence.Models.Conference", "Conference")
                        .WithMany("ConferencePointOfInterests")
                        .HasForeignKey("ConferenceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Persistence.Models.PointOfInterest", "PointOfInterest")
                        .WithMany("ConferencePointOfInterests")
                        .HasForeignKey("PointOfInterestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.ConferenceSponsor", b =>
                {
                    b.HasOne("Persistence.Models.Conference", "Conference")
                        .WithMany("ConferenceSponsors")
                        .HasForeignKey("ConferenceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Persistence.Models.Sponsor", "Sponsor")
                        .WithMany("ConferenceSponsors")
                        .HasForeignKey("SponsorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.ParticipantPhoto", b =>
                {
                    b.HasOne("Persistence.Models.Participant", "Participant")
                        .WithOne("ParticipantPhoto")
                        .HasForeignKey("Persistence.Models.ParticipantPhoto", "ParticipantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.PointOfInterest", b =>
                {
                    b.HasOne("Persistence.Models.PointOfInterestType", "PointOfInterestType")
                        .WithMany("PointsOfInterest")
                        .HasForeignKey("PointOfInterestTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.PointOfInterestType", b =>
                {
                    b.HasOne("Persistence.Models.PointOfInterestIcon", "PointOfInterestIcon")
                        .WithMany("PointOfInterestTypes")
                        .HasForeignKey("PointOfInterestIconID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.Presentation", b =>
                {
                    b.HasOne("Persistence.Models.Conference", "Conference")
                        .WithMany("Presentations")
                        .HasForeignKey("ConferenceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Persistence.Models.PresentationType", "PresentationType")
                        .WithMany("Presentations")
                        .HasForeignKey("PresentationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.PresentationParticipant", b =>
                {
                    b.HasOne("Persistence.Models.Participant", "Participant")
                        .WithMany("PresentationParticipants")
                        .HasForeignKey("ParticipantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Persistence.Models.Presentation", "Presentation")
                        .WithMany("PresentationParticipants")
                        .HasForeignKey("PresentationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.PresentationPhoto", b =>
                {
                    b.HasOne("Persistence.Models.Presentation", "Presentation")
                        .WithMany("PresentationPhotos")
                        .HasForeignKey("PresentationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.Rate", b =>
                {
                    b.HasOne("Persistence.Models.Conference", "Conference")
                        .WithMany("Rates")
                        .HasForeignKey("ConferenceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Persistence.Models.Presentation", "Presentation")
                        .WithMany("Rates")
                        .HasForeignKey("PresentationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Persistence.Models.RateCriterion", "RateCriterion")
                        .WithMany("Rates")
                        .HasForeignKey("RateCriterionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistence.Models.RateCriterion", b =>
                {
                    b.HasOne("Persistence.Models.RateCriterionType", "RateCriterionType")
                        .WithMany("RateCriterions")
                        .HasForeignKey("RateCriterionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
